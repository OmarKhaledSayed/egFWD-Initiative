
On-Demand Traffic Light Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000346  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000346  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000346  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007d6  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000623  00000000  00000000  00000c0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000457  00000000  00000000  0000122d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00001684  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f5  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000372  00000000  00000000  00001b25  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001e97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  74:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_init>:
 */ 
#include "application.h"

/*App_init function initialize all the needed drivers to be initialized such as button driver, led driver, global interrupts*/
	APP_init(void){
		DIO_init(PORT_A, PIN2, OUT);
  7c:	41 e0       	ldi	r20, 0x01	; 1
  7e:	62 e0       	ldi	r22, 0x02	; 2
  80:	81 e4       	ldi	r24, 0x41	; 65
  82:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_init>
  86:	08 95       	ret

00000088 <APP_start>:
	}
/*App_start function it have all the application flow included in while loop*/
	APP_start(void){
		while(1){
			DIO_write(PORT_A, PIN2, HIGH);
  88:	41 e0       	ldi	r20, 0x01	; 1
  8a:	62 e0       	ldi	r22, 0x02	; 2
  8c:	81 e4       	ldi	r24, 0x41	; 65
  8e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <DIO_write>
  92:	fa cf       	rjmp	.-12     	; 0x88 <APP_start>

00000094 <main>:
#include "Application/application.h"


int main(void)
{
	APP_init();
  94:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_init>
	APP_start();
  98:	0e 94 44 00 	call	0x88	; 0x88 <APP_start>
 
}
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	08 95       	ret

000000a2 <DIO_init>:

//global variables
//function definitions
EN_DIOError_t g_DIOError = DIO_OK;
EN_DIOError_t DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction){
	switch (portNumber)
  a2:	82 34       	cpi	r24, 0x42	; 66
  a4:	51 f1       	breq	.+84     	; 0xfa <DIO_init+0x58>
  a6:	18 f4       	brcc	.+6      	; 0xae <DIO_init+0xc>
  a8:	81 34       	cpi	r24, 0x41	; 65
  aa:	41 f0       	breq	.+16     	; 0xbc <DIO_init+0x1a>
  ac:	82 c0       	rjmp	.+260    	; 0x1b2 <DIO_init+0x110>
  ae:	83 34       	cpi	r24, 0x43	; 67
  b0:	09 f4       	brne	.+2      	; 0xb4 <DIO_init+0x12>
  b2:	42 c0       	rjmp	.+132    	; 0x138 <DIO_init+0x96>
  b4:	84 34       	cpi	r24, 0x44	; 68
  b6:	09 f4       	brne	.+2      	; 0xba <DIO_init+0x18>
  b8:	5e c0       	rjmp	.+188    	; 0x176 <DIO_init+0xd4>
  ba:	7b c0       	rjmp	.+246    	; 0x1b2 <DIO_init+0x110>
	{
		case PORT_A:
			if(direction == IN)
  bc:	41 11       	cpse	r20, r1
  be:	0c c0       	rjmp	.+24     	; 0xd8 <DIO_init+0x36>
			{
				/*DDRA &=~ (1<<pinNumber);*/ //input
				/*implement clear bit function its arguments are DDRx and pinNumber*/
				CLEAR_BIT(DDRA, pinNumber);
  c0:	2a b3       	in	r18, 0x1a	; 26
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <DIO_init+0x2a>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <DIO_init+0x26>
  d0:	80 95       	com	r24
  d2:	82 23       	and	r24, r18
  d4:	8a bb       	out	0x1a, r24	; 26
  d6:	6d c0       	rjmp	.+218    	; 0x1b2 <DIO_init+0x110>
			}
			else if(direction == OUT)
  d8:	41 30       	cpi	r20, 0x01	; 1
  da:	59 f4       	brne	.+22     	; 0xf2 <DIO_init+0x50>
			{
				//DDRA |= (1<<pinNumber); //output
				SET_BIT(DDRA, pinNumber);
  dc:	2a b3       	in	r18, 0x1a	; 26
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_init+0x46>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_init+0x42>
  ec:	82 2b       	or	r24, r18
  ee:	8a bb       	out	0x1a, r24	; 26
  f0:	60 c0       	rjmp	.+192    	; 0x1b2 <DIO_init+0x110>
			}
			else
			{
				//Error handling
				//we will change the return of the function and will return error status
				g_DIOError = DIO_init_ERROR;
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  f8:	5c c0       	rjmp	.+184    	; 0x1b2 <DIO_init+0x110>
			}
		break;
		case PORT_B:
			if(direction == IN)
  fa:	41 11       	cpse	r20, r1
  fc:	0c c0       	rjmp	.+24     	; 0x116 <DIO_init+0x74>
			{
				//DDRB &=~ (1<<pinNumber); //input
				CLEAR_BIT(DDRB, pinNumber);
  fe:	27 b3       	in	r18, 0x17	; 23
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_init+0x68>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_init+0x64>
 10e:	80 95       	com	r24
 110:	82 23       	and	r24, r18
 112:	87 bb       	out	0x17, r24	; 23
 114:	4e c0       	rjmp	.+156    	; 0x1b2 <DIO_init+0x110>
			}
			else if(direction == OUT)
 116:	41 30       	cpi	r20, 0x01	; 1
 118:	59 f4       	brne	.+22     	; 0x130 <DIO_init+0x8e>
			{
				//DDRB |= (1<<pinNumber); //output
				SET_BIT(DDRB, pinNumber);
 11a:	27 b3       	in	r18, 0x17	; 23
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_init+0x84>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_init+0x80>
 12a:	82 2b       	or	r24, r18
 12c:	87 bb       	out	0x17, r24	; 23
 12e:	41 c0       	rjmp	.+130    	; 0x1b2 <DIO_init+0x110>
			}
			else
			{
				//Error handling
				//we will change the return of the function and will return error status
				g_DIOError = DIO_init_ERROR;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 136:	3d c0       	rjmp	.+122    	; 0x1b2 <DIO_init+0x110>
			}
		break;
		case PORT_C:
			if(direction == IN)
 138:	41 11       	cpse	r20, r1
 13a:	0c c0       	rjmp	.+24     	; 0x154 <DIO_init+0xb2>
			{
				//DDRC &=~ (1<<pinNumber); //input
				CLEAR_BIT(DDRC, pinNumber);
 13c:	24 b3       	in	r18, 0x14	; 20
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_init+0xa6>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	6a 95       	dec	r22
 14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_init+0xa2>
 14c:	80 95       	com	r24
 14e:	82 23       	and	r24, r18
 150:	84 bb       	out	0x14, r24	; 20
 152:	2f c0       	rjmp	.+94     	; 0x1b2 <DIO_init+0x110>
			}
			else if(direction == OUT)
 154:	41 30       	cpi	r20, 0x01	; 1
 156:	59 f4       	brne	.+22     	; 0x16e <DIO_init+0xcc>
			{
				//DDRC |= (1<<pinNumber); //output
				SET_BIT(DDRC, pinNumber);
 158:	24 b3       	in	r18, 0x14	; 20
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_init+0xc2>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_init+0xbe>
 168:	82 2b       	or	r24, r18
 16a:	84 bb       	out	0x14, r24	; 20
 16c:	22 c0       	rjmp	.+68     	; 0x1b2 <DIO_init+0x110>
			}
			else
			{
				//Error handling
				//we will change the return of the function and will return error status
				g_DIOError = DIO_init_ERROR;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 174:	1e c0       	rjmp	.+60     	; 0x1b2 <DIO_init+0x110>
			}
		break;
		case PORT_D:
			if(direction == IN)
 176:	41 11       	cpse	r20, r1
 178:	0c c0       	rjmp	.+24     	; 0x192 <DIO_init+0xf0>
			{
				//DDRD &=~ (1<<pinNumber); //input
				CLEAR_BIT(DDRD, pinNumber);
 17a:	21 b3       	in	r18, 0x11	; 17
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	02 c0       	rjmp	.+4      	; 0x186 <DIO_init+0xe4>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	6a 95       	dec	r22
 188:	e2 f7       	brpl	.-8      	; 0x182 <DIO_init+0xe0>
 18a:	80 95       	com	r24
 18c:	82 23       	and	r24, r18
 18e:	81 bb       	out	0x11, r24	; 17
 190:	10 c0       	rjmp	.+32     	; 0x1b2 <DIO_init+0x110>
			}
			else if(direction == OUT)
 192:	41 30       	cpi	r20, 0x01	; 1
 194:	59 f4       	brne	.+22     	; 0x1ac <DIO_init+0x10a>
			{
				//DDRD |= (1<<pinNumber); //output
				SET_BIT(DDRD, pinNumber);
 196:	21 b3       	in	r18, 0x11	; 17
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_init+0x100>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_init+0xfc>
 1a6:	82 2b       	or	r24, r18
 1a8:	81 bb       	out	0x11, r24	; 17
 1aa:	03 c0       	rjmp	.+6      	; 0x1b2 <DIO_init+0x110>
			}
			else
			{
				//Error handling
				//we will change the return of the function and will return error status
				g_DIOError = DIO_init_ERROR;
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
		break;
	}
	return g_DIOError;
}
 1b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b6:	08 95       	ret

000001b8 <DIO_write>:
EN_DIOError_t DIO_write(uint8_t portNumber, uint8_t pinNumber, uint8_t value){
	switch (portNumber)
 1b8:	82 34       	cpi	r24, 0x42	; 66
 1ba:	51 f1       	breq	.+84     	; 0x210 <DIO_write+0x58>
 1bc:	18 f4       	brcc	.+6      	; 0x1c4 <DIO_write+0xc>
 1be:	81 34       	cpi	r24, 0x41	; 65
 1c0:	41 f0       	breq	.+16     	; 0x1d2 <DIO_write+0x1a>
 1c2:	82 c0       	rjmp	.+260    	; 0x2c8 <DIO_write+0x110>
 1c4:	83 34       	cpi	r24, 0x43	; 67
 1c6:	09 f4       	brne	.+2      	; 0x1ca <DIO_write+0x12>
 1c8:	42 c0       	rjmp	.+132    	; 0x24e <DIO_write+0x96>
 1ca:	84 34       	cpi	r24, 0x44	; 68
 1cc:	09 f4       	brne	.+2      	; 0x1d0 <DIO_write+0x18>
 1ce:	5e c0       	rjmp	.+188    	; 0x28c <DIO_write+0xd4>
 1d0:	7b c0       	rjmp	.+246    	; 0x2c8 <DIO_write+0x110>
	{
		case PORT_A:
		if(value == LOW)
 1d2:	41 11       	cpse	r20, r1
 1d4:	0c c0       	rjmp	.+24     	; 0x1ee <DIO_write+0x36>
		{
			//PORTA &=~ (1<<pinNumber); //write 0
			CLEAR_BIT(PORTA, pinNumber);
 1d6:	2b b3       	in	r18, 0x1b	; 27
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_write+0x2a>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_write+0x26>
 1e6:	80 95       	com	r24
 1e8:	82 23       	and	r24, r18
 1ea:	8b bb       	out	0x1b, r24	; 27
 1ec:	6d c0       	rjmp	.+218    	; 0x2c8 <DIO_write+0x110>
		}
		else if(value == HIGH)
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	59 f4       	brne	.+22     	; 0x208 <DIO_write+0x50>
		{
			//PORTA |= (1<<pinNumber); //write 1
			SET_BIT(PORTA, pinNumber);
 1f2:	2b b3       	in	r18, 0x1b	; 27
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_write+0x46>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_write+0x42>
 202:	82 2b       	or	r24, r18
 204:	8b bb       	out	0x1b, r24	; 27
 206:	60 c0       	rjmp	.+192    	; 0x2c8 <DIO_write+0x110>
		}
		else
		{
			//Error handling
			//we will change the return of the function and will return error status
			g_DIOError = DIO_write_ERROR;
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 20e:	5c c0       	rjmp	.+184    	; 0x2c8 <DIO_write+0x110>
		}
		break;
		case PORT_B:
		if(value == LOW)
 210:	41 11       	cpse	r20, r1
 212:	0c c0       	rjmp	.+24     	; 0x22c <DIO_write+0x74>
		{
			//PORTB &=~ (1<<pinNumber); //write 0
			CLEAR_BIT(PORTB, pinNumber);
 214:	28 b3       	in	r18, 0x18	; 24
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_write+0x68>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_write+0x64>
 224:	80 95       	com	r24
 226:	82 23       	and	r24, r18
 228:	88 bb       	out	0x18, r24	; 24
 22a:	4e c0       	rjmp	.+156    	; 0x2c8 <DIO_write+0x110>
		}
		else if(value == HIGH)
 22c:	41 30       	cpi	r20, 0x01	; 1
 22e:	59 f4       	brne	.+22     	; 0x246 <DIO_write+0x8e>
		{
			//PORTB |= (1<<pinNumber); //write 1
			SET_BIT(PORTB, pinNumber);
 230:	28 b3       	in	r18, 0x18	; 24
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_write+0x84>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_write+0x80>
 240:	82 2b       	or	r24, r18
 242:	88 bb       	out	0x18, r24	; 24
 244:	41 c0       	rjmp	.+130    	; 0x2c8 <DIO_write+0x110>
		}
		else
		{
			//Error handling
			//we will change the return of the function and will return error status
			g_DIOError = DIO_write_ERROR;
 246:	82 e0       	ldi	r24, 0x02	; 2
 248:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 24c:	3d c0       	rjmp	.+122    	; 0x2c8 <DIO_write+0x110>
		}
		break;
		case PORT_C:
		if(value == LOW)
 24e:	41 11       	cpse	r20, r1
 250:	0c c0       	rjmp	.+24     	; 0x26a <DIO_write+0xb2>
		{
			//PORTC &=~ (1<<pinNumber); //write 0
			CLEAR_BIT(PORTC, pinNumber);
 252:	25 b3       	in	r18, 0x15	; 21
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_write+0xa6>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_write+0xa2>
 262:	80 95       	com	r24
 264:	82 23       	and	r24, r18
 266:	85 bb       	out	0x15, r24	; 21
 268:	2f c0       	rjmp	.+94     	; 0x2c8 <DIO_write+0x110>
		}
		else if(value == HIGH)
 26a:	41 30       	cpi	r20, 0x01	; 1
 26c:	59 f4       	brne	.+22     	; 0x284 <DIO_write+0xcc>
		{
			//PORTC |= (1<<pinNumber); //write 1
			SET_BIT(PORTC, pinNumber);
 26e:	25 b3       	in	r18, 0x15	; 21
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_write+0xc2>
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_write+0xbe>
 27e:	82 2b       	or	r24, r18
 280:	85 bb       	out	0x15, r24	; 21
 282:	22 c0       	rjmp	.+68     	; 0x2c8 <DIO_write+0x110>
		}
		else
		{
			//Error handling
			//we will change the return of the function and will return error status
			g_DIOError = DIO_write_ERROR;
 284:	82 e0       	ldi	r24, 0x02	; 2
 286:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 28a:	1e c0       	rjmp	.+60     	; 0x2c8 <DIO_write+0x110>
		}
		break;
		case PORT_D:
		if(value == LOW)
 28c:	41 11       	cpse	r20, r1
 28e:	0c c0       	rjmp	.+24     	; 0x2a8 <DIO_write+0xf0>
		{
			//PORTD &=~ (1<<pinNumber); //write 0
			CLEAR_BIT(PORTD, pinNumber);
 290:	22 b3       	in	r18, 0x12	; 18
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_write+0xe4>
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	6a 95       	dec	r22
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_write+0xe0>
 2a0:	80 95       	com	r24
 2a2:	82 23       	and	r24, r18
 2a4:	82 bb       	out	0x12, r24	; 18
 2a6:	10 c0       	rjmp	.+32     	; 0x2c8 <DIO_write+0x110>
		}
		else if(value == HIGH)
 2a8:	41 30       	cpi	r20, 0x01	; 1
 2aa:	59 f4       	brne	.+22     	; 0x2c2 <DIO_write+0x10a>
		{
			//PORTD |= (1<<pinNumber); //write 1
			SET_BIT(PORTD, pinNumber);
 2ac:	22 b3       	in	r18, 0x12	; 18
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_write+0x100>
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_write+0xfc>
 2bc:	82 2b       	or	r24, r18
 2be:	82 bb       	out	0x12, r24	; 18
 2c0:	03 c0       	rjmp	.+6      	; 0x2c8 <DIO_write+0x110>
		}
		else
		{
			//Error handling
			//we will change the return of the function and will return error status
			g_DIOError = DIO_write_ERROR;
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		break;
	}
	return g_DIOError;
}
 2c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2cc:	08 95       	ret

000002ce <_exit>:
 2ce:	f8 94       	cli

000002d0 <__stop_program>:
 2d0:	ff cf       	rjmp	.-2      	; 0x2d0 <__stop_program>
